name: Build CNB and push to registry
on:
  workflow_call:  
    inputs:
      registry_root:
        required: true
        type: string
      image_tagged:
        required: false
        type: string
        description: Deprecated, use image_name
      image_name:
        required: false
        type: string
      source_image:
        required: false
        type: string
      default_port:
        required: true
        type: string
      fetch-depth:
        required: false
        type: number
        default: 0
      fetch-tags:
        required: false
        type: string
        default: 'true'
      environment:
        required: false
        type: string
        default: ''
      submodules:
        required: false
        type: string
        default: 'false'
      PUBLIC_URL:
        required: false
        type: string
        default: ''
  workflow_dispatch: {}
  repository_dispatch:
    types: [run]
jobs:
  build_and_push_to_registry:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}
          fetch-tags: ${{ inputs.fetch-tags }}
          submodules: ${{ inputs.submodules }}
# CNB are not multi-arch ready as of May 2022 so this is not needed
# It causes problems with this workflow so test later
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create tags based on git data
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.registry_root }}${{ inputs.image_tagged || inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{sha}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up pack
        uses: buildpacks/github-actions/setup-pack@v5.4.0
      - name: Build using heroku/buildpacks:22 CNB
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          PUBLIC_URL: ${{ inputs.PUBLIC_URL }}
        run: |
          echo -n "$SECRETS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("\(.key|sub("K8S_SECRET_"; ""))=\(.value|tostring)")|.[]' > secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("\(.key|sub("K8S_SECRET_"; ""))=\(.value|tostring)")|.[]' >> secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key == "SERVICE_ID")]|map("\(.key)=\(.value|tostring)")|.[]' >> secrets.env
          if [ "${PUBLIC_URL}x" == "x" ]
          then echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key == "PUBLIC_URL")]|map("\(.key)=\(.value|tostring)")|.[]' >> secrets.env
          else echo "PUBLIC_URL=$PUBLIC_URL" >> secrets.env 
          fi
          echo -n "$SECRETS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("LC_K8S_SECRET_"))]|map("\(.key|sub("LC_K8S_SECRET_"; "")|ascii_downcase)=\(.value|tostring)")|.[]' >> secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("LC_K8S_SECRET_"))]|map("\(.key|sub("LC_K8S_SECRET_"; "")|ascii_downcase)=\(.value|tostring)")|.[]' >> secrets.env
          pack build ${{ inputs.registry_root }}${{ inputs.image_tagged || inputs.image_name }}/source --env-file secrets.env --builder heroku/builder:22 \
            --cache-image ${{ inputs.registry_root }}${{ inputs.image_tagged || inputs.image_name }}/source:cache --publish          
          rm secrets.env
          cat > Dockerfile <<EOF
          ARG source_image
          FROM \${source_image}
          ARG default_port
          ENV PORT=\${default_port}
          EXPOSE \${default_port}
          EOF
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            default_port=${{ inputs.default_port }}
            source_image=${{ inputs.registry_root }}${{ inputs.image_tagged || inputs.image_name }}/source
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

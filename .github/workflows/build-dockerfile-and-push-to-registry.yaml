name: Build with Herokuish and push to registry
on:
  workflow_call:  
    inputs:
      registry_root:
        required: true
        type: string
      image_tagged:
        required: false
        type: string
        description: Deprecated, use image_name
      image_name:
        required: false
        type: string
      herokuish_base_image:
        required: false
        type: string
        default: gliderlabs/herokuish:latest-22
      default_port:
        required: true
        type: string
      fetch-depth:
        required: false
        type: number
        default: 0
      fetch-tags:
        required: false
        type: string
        default: 'true'
      BUILDPACK_URL:
        required: false
        type: string
        default: ''
      environment:
        required: false
        type: string
        default: ''
      submodules:
        required: false
        type: string
        default: 'false'
      PUBLIC_URL:
        required: false
        type: string
        default: ''
      context:
        required: false
        type: string
        default: '.'
      file:
        required: false
        type: string
        default: 'Dockerfile'
      platforms:
        required: false
        type: string
        default: 'linux/amd64'
  workflow_dispatch: {}
  repository_dispatch:
    types: [run]
jobs:
  build_and_push_to_registry:
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}
          fetch-tags: ${{ inputs.fetch-tags }}
          submodules: ${{ inputs.submodules }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create tags based on git data
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.registry_root }}${{ inputs.image_tagged || inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{sha}}
      - name: Create build environment
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          PUBLIC_URL: ${{ inputs.PUBLIC_URL }}
        run: |
          echo -n "$SECRETS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("export \(.key|sub("K8S_SECRET_"; ""))=\(.value|tostring|@sh)")|.[]' > secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("export \(.key|sub("K8S_SECRET_"; ""))=\(.value|tostring|@sh)")|.[]' >> secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key == "SERVICE_ID")]|map("export \(.key)=\(.value|tostring)")|.[]' >> secrets.env
          if [ "${PUBLIC_URL}x" == "x" ]
          then echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key == "PUBLIC_URL")]|map("export \(.key)=\(.value|tostring)")|.[]' >> secrets.env
          else echo "export PUBLIC_URL=$PUBLIC_URL" >> secrets.env 
          fi
          echo -n "$SECRETS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("LC_K8S_SECRET_"))]|map("export \(.key|sub("LC_K8S_SECRET_"; "")|ascii_downcase)=\(.value|tostring|@sh)")|.[]' >> secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("LC_K8S_SECRET_"))]|map("export \(.key|sub("LC_K8S_SECRET_"; "")|ascii_downcase)=\(.value|tostring|@sh)")|.[]' >> secrets.env
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          build-args: |
            BUILDPACK_URL=${{ inputs.BUILDPACK_URL }}
          platforms: ${{ inputs.platforms }}
          provenance: true
          sbom: true
          push: true
          secret-files: |
            "secrets_env=./secrets.env"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
